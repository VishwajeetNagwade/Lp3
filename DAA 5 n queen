class NQueens:
    def __init__(self) -> None:
        self.size = int(input("Enter size of chessboard: "))
        self.board = [[False]*self.size for _ in range(self.size)]
        self.count = 0
    
    def printBoard(self):
        for row in self.board:
            print(" ".join("Q" if cell else "X" for cell in row))
        print()

    def isSafe(self, row, col) -> bool:
        # Check the column and both diagonals for conflicts
        for i in range(row):
            if self.board[i][col] or \
               (col - (row - i) >= 0 and self.board[i][col - (row - i)]) or \
               (col + (row - i) < self.size and self.board[i][col + (row - i)]):
                return False
        return True

    def solve(self, row:int):
        if row == self.size:  # All queens are placed
            self.count += 1
            self.printBoard()
            return
        
        for col in range(self.size):
            if self.isSafe(row, col):
                self.board[row][col] = True
                self.solve(row + 1)
                self.board[row][col] = False

    def displayMessage(self):
        if self.count > 0:
            print(f"Solution exists with {self.count} arrangement(s).")
        else:
            print("Solution doesn't exist.")

solver = NQueens()
solver.solve(0)
solver.displayMessage()
